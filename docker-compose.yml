version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: email-backend-postgres
    environment:
      POSTGRES_DB: email_backend
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - email-backend-network
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: email-backend-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - email-backend-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # 后端 API 服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: email-backend-api
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres123
      DB_DATABASE: email_backend
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-here-change-in-production
      JWT_EXPIRES_IN: 24h
      REFRESH_TOKEN_SECRET: your-super-secret-refresh-token-key-here-change-in-production
      REFRESH_TOKEN_EXPIRES_IN: 30d
      FRONTEND_URL: http://localhost:3001
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      SMTP_FROM: "用户管理系统" <noreply@example.com>
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - email-backend-network
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3000/api/v1
        VITE_SUPABASE_URL: your-supabase-project-url
        VITE_SUPABASE_ANON_KEY: your-supabase-anon-key
    container_name: email-backend-frontend
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - email-backend-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  email-backend-network:
    driver: bridge